service: user

provider:
  name: aws
  region: us-east-1
  stage: ${self:custom.currentStage}
  profile: training
  runtime: nodejs16.x
  role:
    'Fn::ImportValue': gabu-lambda-role-${self:custom.currentStage}
  apiGateway:
    restApiId:
      'Fn::ImportValue': ${self:custom.currentStage}-ExtApiGatewayRestApiId
    restApiRootResourceId:
      'Fn::ImportValue': ${self:custom.currentStage}-ExtApiGatewayRestApiRootResourceId
  environment:
    env: ${self:custom.currentStage}
    # clientId: ${self:custom.clientId}
    # userPoolId: ${self:custom.userPoolId}
    clientId: 746rj7cov5qsnj8t9esckup6o0
    userPoolId: us-east-1_ymT4PriZh
  deploymentBucket:
    name: ${self:custom.deploymentBucketName}

custom:
  currentStage: ${file(../../serverless.yml):custom.currentStage}
  deploymentBucketName: ${file(../../serverless.yml):custom.deploymentBucketName}
  authorizerId:
    'Fn::ImportValue': ${self:custom.currentStage}-ApiCustomAuthorizerId
  clientId:
    'Fn::ImportValue': ${self:custom.currentStage}-CognitoUserPoolClientId
  userPoolId:
    'Fn::ImportValue': ${self:custom.currentStage}-CognitoUserPoolId
  bundle:
    sourcemaps: false
    linting: false

plugins:
  - serverless-bundle
  - serverless-offline

functions:
  createUser:
    name: createUser-${self:custom.currentStage}
    handler: lambdas/create.handler
    events:
      - http:
          path: /user
          method: POST
          authorizer:
            type: REQUEST
            authorizerId: ${self:custom.authorizerId}
          cors: true
  updateUser:
    name: updateUser-${self:custom.currentStage}
    handler: lambdas/update.handler
    events:
      - http:
          path: /user
          method: PUT
          authorizer:
            type: REQUEST
            authorizerId: ${self:custom.authorizerId}
          cors: true
  login:
    name: login-${self:custom.currentStage}
    handler: lambdas/login.handler
    events:
      - http:
          path: /login
          method: POST
          authorizer:
            type: REQUEST
            authorizerId: ${self:custom.authorizerId}
          cors: true
  requestPasswordReset:
    name: requestPasswordReset-${self:custom.currentStage}
    handler: lambdas/passwordReset.request
    events:
      - http:
          path: /user/passwordResetRequest
          method: POST
          authorizer:
            type: REQUEST
            authorizerId: ${self:custom.authorizerId}
          cors: true
  passwordReset:
    name: passwordReset-${self:custom.currentStage}
    handler: lambdas/passwordReset.reset
    events:
      - http:
          path: /user/passwordReset
          method: POST
          authorizer:
            type: REQUEST
            authorizerId: ${self:custom.authorizerId}
          cors: true

