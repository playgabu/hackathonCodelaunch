service: gameSession

provider:
  name: aws
  region: us-east-1
  stage: ${self:custom.currentStage}
  runtime: nodejs16.x
  role:
    'Fn::ImportValue': gabu-lambda-role-${self:custom.currentStage}
  apiGateway:
    restApiId:
      'Fn::ImportValue': ${self:custom.currentStage}-ExtApiGatewayRestApiId
    restApiRootResourceId:
      'Fn::ImportValue': ${self:custom.currentStage}-ExtApiGatewayRestApiRootResourceId
  environment:
    env: ${self:custom.currentStage}
    clientId: ${self:custom.clientId}
    userPoolId: ${self:custom.userPoolId}
  deploymentBucket:
    name: ${self:custom.deploymentBucketName}

custom:
  currentStage: ${file(../../serverless.yml):custom.currentStage}
  deploymentBucketName: ${file(../../serverless.yml):custom.deploymentBucketName}
  authorizerId:
    'Fn::ImportValue': ${self:custom.currentStage}-ApiAuthorizerId
  clientId:
    'Fn::ImportValue': ${self:custom.currentStage}-CognitoUserPoolClientId
  userPoolId:
    'Fn::ImportValue': ${self:custom.currentStage}-CognitoUserPoolId
  bundle:
    sourcemaps: false
    linting: false

plugins:
  - serverless-bundle
  - serverless-offline

functions:
  getGameSessions:
    name: getGameSessions-${self:custom.currentStage}
    handler: lambdas/getAll.handler
    events:
      - http:
          path: /gameSession
          method: GET
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${self:custom.authorizerId}
          cors: true
  getGameSession:
    name: getGameSession-${self:custom.currentStage}
    handler: lambdas/get.handler
    events:
      - http:
          path: /gameSession/{id}
          method: GET
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${self:custom.authorizerId}
          cors: true
  joinGameSession:
    name: joinGameSession-${self:custom.currentStage}
    handler: lambdas/join.handler
    events:
      - http:
          path: /gameSession/{id}/join
          method: POST
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${self:custom.authorizerId}
          cors: true
  leaveGameSession:
    name: leaveGameSession-${self:custom.currentStage}
    handler: lambdas/leave.handler
    events:
      - http:
          path: /gameSession/{id}/leave
          method: POST
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${self:custom.authorizerId}
          cors: true

